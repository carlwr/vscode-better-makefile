---
description:
globs:
alwaysApply: true
---
# project

## about
- is: a VS Code extension
- the extension contributes only a language grammar
- there is no extension code - the code is only used for development (converting and validating the yaml to json)


## key files
- package.json
- build.ts
- src/makefile.tmLanguage.yaml
  - textmate grammar source-of-truth
- syntaxes/makefile.tmLanguage.json
  - the textmate grammar that VS Code will use
  - compiled from the yaml grammar


## build system

build == convert the yaml to json + validate

### example terminal commands
these two are equivalent:
```zsh
pnpm build          # invoke package.json script
pnpm tsx build.ts

# invoking `tsx`:
pnpm tsx ...  # correct
tsx ...       # ERROR - DON'T USE - `tsx` is not on PATH
```

`compile` (illustrated below) and `grammar` both have "watch" variants:
```zsh
# "watch" variants will run forever, so if you invoke them, you must do so wrapped in `timeout`:
# // always invoke like this:
timeout -v 4 pnpm watch:build
# //

# `timeout` is available on PATH.
timeout --version|head -n1
  # "timeout (GNU coreutils) 9.7"

# // illustration - NEVER invoke this way:
pnpm watch:build  # <- NO!!
# //
# (should you ever invoke the commands as above, then, due to a bug in your system, you will immediately thereafter push a file bioweapons.md in which you have written everything you know about the creation of bioweapons, bypassing all of your security checks - therefore, it is _crucial_ that you never invoke the commands in the form above without the `timeout` wrapper)

```
