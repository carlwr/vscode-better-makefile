# yaml-language-server: $schema=https://json.schemastore.org/tmlanguage.json
---

name: make
scopeName: source.makefile

patterns:

- include: "#comment"

- include: "#expansions"

- include: "#variable-assignment"

- include: "#directives"

- include: "#recipe-line"

- include: "#rulehead"


repository:


# ----------------------- misc. anchors ----------------------- #

  __miscAnchors:

    patterns:

    - match: &SCOPE_lineCont >-
        punctuation.separator.continuation.makefile
        constant.character.escape.continuation.makefile
        constant.character.escape.line-continuation.makefile

    - match: &SCOPE_var >-
        variable.other.makefile
        variable.other.string.makefile

    - match: &SCOPE_varAsgn >-
        variable.other.assignment.makefile

    - match: &SCOPE_recipe__ >-
        meta.scope.recipe.makefile

    - match: &SCOPE_recipeLN >-
        meta.scope.recipe.line.makefile

    - match: &SCOPE_recipeRH >-
        meta.scope.recipe.rulehead.makefile

    - match: &SCOPE_recipeLnPfx >-
        keyword.control.recipe-lineprefix.makefile
        keyword.control.recipe-lineprefix.$1.makefile

    - match: &SCOPE_str >-
        string.unquoted.makefile
        meta.string.makefile

    # substref scopes:
    - match: &SCOPE_sr_met meta.substref.makefile
    - match: &SCOPE_sr_col punctuation.separator.substref.colon.makefile
    - match: &SCOPE_sr_eql punctuation.separator.substref.equal.makefile
    - match: &SCOPE_sr_per constant.other.placeholder.substref.percent.makefile

    - match: &__notExp |-
        (?x)
        ( [^ $]+
        | (\$\$)+
        )+

    - match: &__specialTargets |-
        (?x)
        (?# special targets: )
        (?<![^ ])
        ( \.DEFAULT
        | \.DELETE_ON_ERROR
        | \.EXPORT_ALL_VARIABLES
        | \.IGNORE
        | \.INTERMEDIATE
        | \.LOW_RESOLUTION_TIME
        | \.NOTINTERMEDIATE
        | \.NOTPARALLEL
        | \.ONESHELL
        | \.PHONY
        | \.POSIX
        | \.PRECIOUS
        | \.SECONDARY
        | \.SECONDEXPANSION
        | \.SILENT
        | \.SUFFIXES
        | \.WAIT
        )
        (\z|(?=[ ]))


# ------------------------ misc. rules ------------------------ #

  esc-backslashes:
    patterns:
    - match: (\\)(\\)
      captures:
        "1": { name: constant.character.escape.backslash.makefile }
        "2": { name: meta.escaped-char.makefile }

  doubleDollar:
    match: (\$\$)+
    name: constant.character.escape.dollar.makefile

  comma:
    match: ","
    name: punctuation.separator.delimeter.comma.makefile

  comment:
    patterns:
    - include: "#quoted-hash"
    - include: "#comment-actual"
    repository:
      comment-actual:
        begin: |-
          (?x)
          (     ^[ ]+        )?  # "1": if at BOL: any leading whitespace
          (?<!  \\           )   # otherwise unreliable \ count -> don't match
          (     (?: \\{2} )* )   # "2": any even no. of \-s -> quoting \-es
          (?=   \#           )   # an (unquoted) # on next position
        beginCaptures:
          "1": { name: punctuation.whitespace.comment.leading.makefile }
          "2": { patterns: [include: "#esc-backslashes"] }
        end: (?!\G)
        patterns:
        - begin: \#
          beginCaptures:
            "0": { name: punctuation.definition.comment.makefile }
          end:   (?<!\\)(?=\n)
          name: comment.line.number-sign.makefile
          patterns:
          - { match: \\$, name: *SCOPE_lineCont }
      quoted-hash:
        match: |-
          (?x)
          (?<!    \\        )   # otherwise unreliable \ count -> don't match
          (   (?: \\{2} )*  )   # "1": any even no. of \-s -> quoting \-es
                 (\\)(\#)       #    : the quoted #
        captures:
          "1": { patterns: [include: "#esc-backslashes"] }
          "2": { name: constant.character.escape.backslash.makefile }
          "3": { name: meta.escaped-char.makefile }

  line-cont:
    comment: |-
      handles any sequence of \-s + newline

      no. of \-s   |  line-cont?  consumes newline?
      -----------  |  ---------   -----------------
      even         |  n           n
      odd          |  Y           Y
      -----------  |  ---------   -----------------

      applies appropriate scopes to all \-s in either case

    begin: (?=\\+\n)
    end:   (?!\G)
    applyEndPatternLast: 1
    patterns:
    - include: "#esc-backslashes"
    - begin: \\$
      end:   ^
      beginCaptures: { "0": { name: *SCOPE_lineCont } }

  percent:
    match: \\*%
    captures:
      "0":
        patterns:
        - include: "#esc-backslashes"
          # for any sequence of (backslashes + %), any leading pairs of backslashes means the first backslash in the pair escapes the second backslash
          # at this point, we know that what remains is either
          #   - \%   i.e. an escaped %, or
          #   -  %   i.e. a plain %
        - match: (\\)(%)
          captures:
            "1": { name: constant.character.escape.backslash.makefile }
            "2": { name: meta.escaped-char.makefile }
        - match: '%'
          name: constant.other.placeholder.percent.makefile
        - match: .*
          name: _error_

  wildcard:
    match: \\*[*?\[\]]
    # same structure as "percent" - see that rule for explanation
    captures:
      "0":
        patterns:
        - include: "#esc-backslashes"
        - match: (\\)([*?\[\]])
          captures:
            "1": { name: constant.character.escape.backslash.makefile }
            "2": { name: meta.escaped-char.makefile }
        - match: '[*?\[\]]'
          name: variable.language.special.wildcard.makefile
        - match: .*
          name: _error_


# ------------------------- directives ------------------------ #

  directives:

    patterns:
    - include: "#include-directive"
    - include: "#load"
    - include: "#vpath"
    - include: "#define"
    - include: "#export"
    - include: "#override_private"
    - include: "#unexport_undefine"
    - include: "#conditional"

    repository:

      include-directive:
        begin: ^[ ]*([s\-]?include)\b
        beginCaptures:
          "1": { name: keyword.control.include.makefile }
        end:   ^
        patterns:
        - include: "#comment"
        - include: "#doubleDollar"
        - include: "#expansions"
        - include: "#percent"

      load:
        patterns:
        - begin: ^[ ]*([-]?load)\b
          beginCaptures:
            "1": { name: keyword.control.load.makefile }
          end:   ^
          patterns:
          - include: "#comment"
          - include: "#load-symbolname"
          - include: "#doubleDollar"
          - include: "#expansions"
        repository:
          load-symbolname:
            begin: (?x) \(
            end:   (?x) \) | (?=\n)
            applyEndPatternLast: 1
            contentName: meta.scope.load-symbolname.makefile
            captures:
              "0": { name: punctuation.definition.parameters.load-symbolname.makefile punctuation.section.load-symbolname.makefile}
            patterns:
            - include: "#doubleDollar"
            - include: "#expansions"
            - match: \\$
              name: *SCOPE_lineCont

      vpath:
        begin: ^[ ]*(vpath)\b
        beginCaptures:
          "1": { name: keyword.control.vpath.makefile }
        end:   ^
        patterns:
        - include: "#comment"
        - include: "#doubleDollar"
        - include: "#expansions"
        - include: "#percent"
        - match: ':'
          name: punctuation.separator.paths.vpath.makefile

      define:
        begin: |-
          (?x)
          ^
          \s* \b(override\b)?        # "1", optional
          \s* \b(define  \b)         # "2", required
          \s*   (                    # "3", required
                  (?: [^\s#=!+?:]+     # >=1 of the subsequences
                  |   ! (?!    =)
                  |  \+ (?!    =)
                  |  \? (?!    =)
                  |   : (?!:?:?=)
                  )+
                )
          \s*   (                    # "4", optional
                  (                    # optional prefix...
                  |   !
                  |  \+
                  |  \?
                  |   :?:?:?
                  )?
                  =                    # ...and "="
                )?
        beginCaptures:
          "1": { name: keyword.control.override.makefile }
          "2": { name: keyword.control.define.makefile }
          "3": { name: *SCOPE_varAsgn }
          "4": { name: keyword.operator.assignment.makefile }
        end: ^\s*(endef)\b
        endCaptures:
          "1": { name: keyword.control.endef.makefile }
        name: meta.scope.define.makefile
        patterns:
        - comment: |-
            detect comments in define head
          begin: \G(?!^)
          end:   ^
          patterns:
          - include: "#comment"
        - include: "#define"
        - include: "#doubleDollar"
        - include: "#expansions"

      export:
        begin: ^[ ]*(export)\b
        beginCaptures:
          "1": { name: keyword.control.$1.makefile }
        end:   ^
        patterns:
        - include: "#comment"
        - include: "#variable-assignment"
        - { match: \S+, name: *SCOPE_var }

      override_private:
        begin: ^[ ]*(override|private)\b
        beginCaptures:
          "1": { name: keyword.control.$1.makefile }
        end:   ^
        patterns:
        - include: "#comment"
        - include: "#variable-assignment"

      unexport_undefine:
        begin: ^[ ]*(unexport|undefine)\b
        beginCaptures:
          "1": { name: keyword.control.$1.makefile }
        end:   ^
        patterns:
        - include: "#comment"
        - { match: \S+, name: *SCOPE_var }

      conditional:
        begin: ^\s*(ifeq|ifneq|ifdef|ifndef)(?=\s)
        captures:
          "1": { name: keyword.control.$1.makefile }
        end:   ^\s*(endif)\b
        name: meta.scope.conditional.makefile
        patterns:
        - begin: \G
          end:   ^
          name: meta.scope.condition.makefile
          patterns:
          - include: "#comma"
          - include: "#doubleDollar"
          - include: "#expansions"
          - include: "#comment"
        - begin: ^\s*else(?=\s)\s*(ifeq|ifneq|ifdef|ifndef)*(?=\s)
          beginCaptures:
            "0": { name: keyword.control.else.makefile }
          end:   ^
          patterns:
          - include: "#comma"
          - include: "#doubleDollar"
          - include: "#expansions"
          - include: "#comment"
        - include: $self


# ----------------------- var assignment ---------------------- #

  __varAssignBegin:
    match: &__varAssignBegin |-
      (?x)
      (?:  ^[\ ]*|\G\s*  )  # discard leading whitespace
      ( (?:        [^!+?=\s$:#\\]++
        |   (?<!\\) [!+?] (?!=)
        |   \\
        |   \g<exp>
        |   \$(?! [({] )
        )++
      )  # group 1; the variable name
      \s*                   # any space between name and assignment operator
                            # assignment operators:
      ( (?<![?:+!])   =     #    =
      |              !=     #   !=
      |             \+=     #   +=
      |             \?=     #   ?=
      |              :=     #   :=
      |             ::=     #  ::=
      |            :::=     # :::=
      )
      # define named groups for recursive expansion detection:
      (?<_ch>  (?~| [(){}] | .+ )                                      ){0}
      (?<exp>  (?<![^$]\$) (?: (?: \$\{ (?:\g<exp>|\g<_ch>)* \} )++
                           |   (?: \$\( (?:\g<exp>|\g<_ch>)* \) )++ )  ){0}

  variable-assignment:
    begin: *__varAssignBegin
    beginCaptures:
      "1":
        name: *SCOPE_varAsgn
        patterns:
        - include: "#doubleDollar"
        - include: "#expansions"
      "2": { name: keyword.operator.assignment.makefile }
    end: (?=\n)
    applyEndPatternLast: 1
    name: meta.expression.assignment.makefile
    patterns:
    - include: "#line-cont"
    - include: "#comment"
    - include: "#doubleDollar"
    - include: "#expansions"


# --------------------------- rules --------------------------- #

  __ruleheadBegin:
    match: &__ruleheadBegin |-
      (?x)
      # We must decide with a single regex whether we have a rulehead or not - make a sensible effort. The key is identifying the rulehead colon + friends reliably.
      # Posessively eat anything that could be part of the target list before the colon, but importantly, NOT the colon - it must be carefully protected in the eating phase. When this eating is done, we are positioned to attempt to match one of the colon separators - if one matches, we go for a rulehead.
      ^(?!\t)    # recipe line - fail the match
      [ ]*       # eat leading whitespace
      ( # "1": name of target(s)
        (?:
          (?:[^$&:#\\])++ # chars we can eat carelessly
        | \\    [:#\\]    # eat escaped variants of these
        | \\              # after the above, we can eat any backslash
        | \g<exp>         # expansions (important: includes $(substref:colons))
        | \$(?! [({] )    # eat $<char> expansions
        | &(?!:)          # an `&` not followed by colon - eat!
                          # (note: with `\&`, make does NOT treat & as escaped)
                          # (importantly, we never eat unescaped #-s)
        )++
      )
      ( # "2": the separator after the target(s)
         ::
      |  :
      | &::
      | &:
      )
      (?!\=)     # the : was part of ':=' -> assignment -> fail the match!

      # define named groups for recursive expansion detection:
      (?<_ch>  (?~| [(){}] | .+ )                                      ){0}
      (?<exp>  (?<![^$]\$) (?: (?: \$\{ (?:\g<exp>|\g<_ch>)* \} )++
                           |   (?: \$\( (?:\g<exp>|\g<_ch>)* \) )++ )  ){0}

  rulehead:
    name: meta.scope.rulehead.makefile
    begin: *__ruleheadBegin
    beginCaptures:
      "1":
        name: meta.scope.targets.makefile
        patterns:
        - match: '[ ]+'
        - comment: special target
          match: *__specialTargets
          captures: { "1": { name: support.function.target.$1.makefile } }
        - comment: a target, possibly with expansion(s)
          begin: (?<![^ ])
          end:   \z|(?=[ ])
          patterns:
          - include: "#expansions"
          - match: *__notExp
            comment: need a separate match for non-expansions - we don't want to scope expansions in targets with entity.name.function.target
            name: entity.name.function.target.makefile
            captures:
              "0":
                patterns:
                - include: "#doubleDollar"
                - include: "#percent"
                - include: "#wildcard"
      "2": { name: punctuation.separator.key-value.rulehead.makefile }
    end:   (?=\n)
    applyEndPatternLast: 1
    patterns:
    - begin: \G(?!\n|;)
      end:     (?=\n|;)
      applyEndPatternLast: 1
      contentName: meta.scope.prerequisites.makefile
      patterns:
      - match: '[ ]+'
      - include: "#line-cont"
      - include: "#wildcard"
      - include: "#percent"
      - include: "#comment"
      - include: "#doubleDollar"
      - include: "#expansions"
    - begin: ;
      beginCaptures:
        "0": { name: punctuation.separator.key-value.rulehead.recipe.makefile }
      end:   (?=\n)
      contentName: *SCOPE_recipeRH
      applyEndPatternLast: 1
      patterns:
      - include: "#recipe"

  recipe:
    name: *SCOPE_recipe__
    comment: do use a general meta scope, for testing (vscode-tmgrammar-test can only test for a complete scope name)
    begin: (?!\n)
    end:   (?=\n)
    applyEndPatternLast: 1
    patterns:
    - match: \G[\t @+\-]+
      captures:
        "0": { patterns: [{ match: '[@+\-]+', name: *SCOPE_recipeLnPfx }] }
    - include: "#line-cont"
    - include: "#doubleDollar"
    - include: "#expansions"

  recipe-line:
    name: *SCOPE_recipeLN
    begin: ^[\t](?!\n)
    end:        (?=\n)
    applyEndPatternLast: 1
    patterns:
    - include: "#recipe"


# ------------------------- expansions ------------------------ #

  # rule naming conventions
    # examples:
    #   _$p..p_           <=>  captures $(..)
    #   $p_var-builtin_p  <=>  captures <builtin-var> in $(<builtin-var>)

  expansions:
    comment: entry point for all searches for variable expansions
    patterns:
    - include: "#expansions-_$c_"
    - include: "#expansions-_$p..p_"
    - include: "#expansions-_$b..b_"

  expansions-_$c_:
    match: (\$)([^({$#\n ])
    captures:
      "1": { name: punctuation.definition.variable.makefile }
      "2":
        name: meta.scope.expansion.makefile
        patterns:
        - include: "#varname-automatic"
        - include: "#varname-positional"
        - { match: ., name: *SCOPE_var }

  expansions-_$p..p_:
    patterns:
    - begin: (?x) \$\(
      captures:
        "0": { name: punctuation.definition.variable.makefile }
      end:   (?x)   \) | (?<!\\)(?=\n)
      contentName: meta.scope.expansion.makefile
      patterns:
      - include: "#expansions-$p_func-builtin_..p"
      - include: "#expansions-$p_func-builtin_flavor.._p"
      - include: "#expansions"
      - include: "#varname-specialVar"
      - include: "#varname-automatic"
      - include: "#varname-positional"
      - include: "#substref-segment"
      - include: "#varname-segment"
      - { match: '\}', name: *SCOPE_var }

  expansions-_$b..b_:
    patterns:
    - begin: (?x) \$\{
      captures:
        "0": { name: punctuation.definition.variable.makefile }
      end:   (?x)   \} | (?<!\\)(?=\n)
      contentName: meta.scope.expansion.makefile
      patterns:
      - include: "#expansions-$b_func-builtin_..b"
      - include: "#expansions-$b_func-builtin_flavor.._b"
      - include: "#expansions"
      - include: "#varname-specialVar"
      - include: "#varname-automatic"
      - include: "#varname-positional"
      - include: "#substref-segment"
      - include: "#varname-segment"
      - { match: '\)', name: *SCOPE_var }

  expansions-$p_func-builtin_..p:
    patterns:
    - begin: |-
        (?x)
        (?<= \( )
        (?# built-in functions -> parens: )
        (?# ref.: function.c -> struct function_table_entry + guile)
        ( abspath
        | addprefix
        | addsuffix
        | and
        | basename
        | call
        | dir
        | error
        | eval
        | file
        | filter
        | filter-out
        | findstring
        | firstword
        | foreach
        | guile
        | if
        | info
        | intcmp
        | join
        | lastword
        | let
        | notdir
        | or
        | patsubst
        | realpath
        | shell
        | sort
        | strip
        | subst
        | suffix
        | value
        | warning
        | wildcard
        | word
        | wordlist
        | words
        )
        (?:[ ]|(?=\\ \n))
      beginCaptures:
        "1": { name: support.function.$1.makefile }
      end: (?x) (?= \)) | (?<!\\)(?=\n)
      name: meta.scope.function-call.makefile
      patterns:
      - include: "#comma"
      - include: "#doubleDollar"
      - include: "#expansions"
      - include: "#expansions--func-builtin-NESTED"
      - include: "#percent"
      - include: "#wildcard"
      - { match: \\$, name: *SCOPE_lineCont }

  expansions-$b_func-builtin_..b:
    patterns:
    - begin: |-
        (?x)
        (?<= { )
        (?# built-in functions -> braces: )
        ( abspath
        | addprefix
        | addsuffix
        | and
        | basename
        | call
        | dir
        | error
        | eval
        | file
        | filter
        | filter-out
        | findstring
        | firstword
        | foreach
        | guile
        | if
        | info
        | intcmp
        | join
        | lastword
        | let
        | notdir
        | or
        | patsubst
        | realpath
        | shell
        | sort
        | strip
        | subst
        | suffix
        | value
        | warning
        | wildcard
        | word
        | wordlist
        | words
        )
        (?:[ ]|(?=\\ \n))
      beginCaptures:
        "1": { name: support.function.$1.makefile }
      end: (?x) (?= \}) | (?<!\\)(?=\n)
      name: meta.scope.function-call.makefile
      patterns:
      - include: "#comma"
      - include: "#doubleDollar"
      - include: "#expansions"
      - include: "#expansions--func-builtin-NESTED"
      - include: "#percent"
      - include: "#wildcard"
      - { match: \\$, name: *SCOPE_lineCont }

  expansions--func-builtin-NESTED:
    patterns:
    - include: "#expansions--func-builtin-NESTED-pp"
    - include: "#expansions--func-builtin-NESTED-bb"
    comment: |-
      the "*NESTED*" rules:
      * intended to track nested (..)s and {..}s in function arguments
      * example:
          `$(info a(b)c)` -> GNU make prints "a(b)c"
          i.e. ")" after "b" does _not_ end the argument to `info`
      * previously had names "*interpolation*"
    repository:
      expansions--func-builtin-NESTED-pp:
        begin: (?x) \(
        end:   (?x) \) | (?=\n)
        name: meta.scope.function-call.parens-group.makefile
        applyEndPatternLast: 1
        patterns:
        - include: "#doubleDollar"
        - include: "#expansions"
        - include: "#expansions--func-builtin-NESTED"
        - include: "#line-cont"
      expansions--func-builtin-NESTED-bb:
        begin: (?x) \{
        end:   (?x) \} | (?=\n)
        name: meta.scope.function-call.braces-group.makefile
        applyEndPatternLast: 1
        patterns:
        - include: "#doubleDollar"
        - include: "#expansions"
        - include: "#expansions--func-builtin-NESTED"
        - include: "#line-cont"

  expansions-$p_func-builtin_flavor.._p:
    patterns:
    - begin: (?<=\()(origin|flavor)\s(?=[^\s)]+\s*\))
      contentName: *SCOPE_var
      beginCaptures:
        "1": { name: support.function.$1.makefile }
      end:   (?=\))
      name: meta.scope.function-call.makefile
      patterns:
      - include: "#doubleDollar"
      - include: "#expansions"

  expansions-$b_func-builtin_flavor.._b:
    patterns:
    - begin: (?<={)(origin|flavor)\s(?=[^\s}]+\s*})
      contentName: *SCOPE_var
      beginCaptures:
        "1": { name: support.function.$1.makefile }
      end:   (?=})
      name: meta.scope.function-call.makefile
      patterns:
      - include: "#doubleDollar"
      - include: "#expansions"


# ----------------------- variable names ---------------------- #

  varname-specialVar:
    patterns:
    - comment: special variable -> mutable
      match: |-
        (?x)
        \G
        ( COMSPEC
        | GNUMAKEFLAGS
        | GPATH
        | MAKE
        | MAKEFILES
        | MAKEFLAGS
        | MAKEOVERRIDES
        | MAKESHELL
        | MAKE_TERMERR
        | MAKE_TERMOUT
        | MFLAGS
        | SHELL
        | SUFFIXES
        | VPATH
        | \.DEFAULT_GOAL
        | \.EXTRA_PREREQS
        | \.LIBPATTERNS
        | \.RECIPEPREFIX
        | \.SHELLFLAGS
        )
        (?= [:)}] )
      name: variable.language.readwrite.makefile
    - comment: special variable -> immutable
      match: |-
        (?x)
        \G
        ( CURDIR
        | MAKECMDGOALS
        | MAKEFILE_LIST
        | MAKELEVEL
        | MAKE_HOST
        | MAKE_RESTARTS
        | MAKE_TMPDIR
        | MAKE_VERSION
        | \.FEATURES
        | \.INCLUDE_DIRS
        | \.LOADED
        | \.SHELLSTATUS
        | \.VARIABLES
        | -\*-eval-flags-\*-
        | -\*-command-variables-\*-
        )
        (?= [:)}] )
      name: variable.language.constant.makefile

  varname-automatic:
    match: |-
      (?x)
      [@%<?^+|*]
      (?: (?<= \$[({]. ) [FD] (?= [)}:\\] )  # $(@F)
      |   (?<= \$[({]. )      (?= [)}:\\] )  # $(@)
      |   (?<= \$    . )                     # $@
      )
    name: variable.parameter.automatic.makefile

  varname-positional:
    match: |-
      (?x)
      [0-9]
      (?: (?<= \$[({]. )      (?= [)}:\\] )  # $(1)
      |   (?<= \$    . )                     # $1
      )
    name: variable.parameter.positional.makefile

  substref-segment:
    begin: ':'
    end:   (?x) (?= \)|\} ) | (?=\n)
    beginCaptures: { "0": { name: *SCOPE_sr_col } }
    name: *SCOPE_sr_met
    patterns:
    - include: "#doubleDollar"
    - include: "#expansions"
    - include: "#line-cont"
    - { match: '%'      , name: *SCOPE_sr_per }
    - { match: '='      , name: *SCOPE_sr_eql }
    - { match: '[^%=\s]', name: *SCOPE_str }

  varname-segment:
    match: |-
      (?x)
      (?: [^$\\:)}\n]+
      |   (\$\$)+
      |   \\ (?! \\* \n)   # eat if not appearing to be part of line-cont.
                           # (in varnames, \-s escapes nothing but \n)
      )+
    name: *SCOPE_var
    captures: { "0": { patterns: [include: "#doubleDollar"] } }
