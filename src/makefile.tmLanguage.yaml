# yaml-language-server: $schema=https://json.schemastore.org/tmlanguage.json
---


name: make
scopeName: source.makefile

patterns:

  - include: "#comment"

  - include: "#variables"

  - include: "#variable-assignment"

  - include: "#directives"

  - include: "#recipe-line"

  - include: "#rulehead"


repository:


# ------------------------ misc. rules ------------------------ #

  esc-backslashes:
    comment: TODO

  doubleDollar:
    comment: TODO

  comma:
    match: ","
    name: punctuation.separator.delimeter.comma.makefile

  comment:
    patterns:
      - include: "#comment-actual"
    repository:
      comment-actual:
        begin: |
          (?x)
          (     ^[ ]+        )?  # "1": any whitespaces at beginning of line
          (?<!  \\           )   # otherwise unreliable \ count -> don't match
          (     (?: \\ \\)*  )   # "2": any even no. of \-s -> quoting \-es
          (?=   \#           )   # an (unquoted) # on next position
        beginCaptures:
          "1": { name: punctuation.whitespace.comment.leading.makefile }
        end: (?!\G)
        patterns:
          - begin: \#
            beginCaptures:
              "0": { name: punctuation.definition.comment.makefile }
            end:   (?=[^\\])$
            name: comment.line.number-sign.makefile
            patterns:
              - match: \\\n
                name: constant.character.escape.continuation.makefile

  line-cont:
    comment: |-
      TODO

  percent:
    comment: TODO

  wildcard:
    comment: TODO


# ------------------------- directives ------------------------ #

  directives:

    patterns:

    - include: "#include-directive"
    - include: "#vpath"
    - include: "#define"
    - include: "#export"
    - include: "#override_private"
    - include: "#unexport_undefine"
    - include: "#conditional"

    repository:

      include-directive:
        begin: ^[ ]*([s\-]?include)\b
        beginCaptures:
          "1": { name: keyword.control.include.makefile }
        end:   ^
        patterns:
          - include: "#comment"
          - include: "#variables"
          - match: '%'
            name: constant.other.placeholder.makefile

      vpath:
        begin: ^[ ]*(vpath)\b
        beginCaptures:
          "1": { name: keyword.control.vpath.makefile }
        end:   ^
        patterns:
          - include: "#comment"
          - include: "#variables"
          - match: '%'
            name: constant.other.placeholder.makefile

      define:
        begin: |
          (?x)
          ^
          \s* \b(override\b)?        # "1", optional
          \s* \b(define  \b)         # "2", required
          \s*   (                    # "3", required
                  [^\s]+
                )
          \s*   (                    # "4", optional
                  (                    # optional prefix...
                  |   !
                  |  \+
                  |  \?
                  |   :?:?:?
                  )?
                  =                    # ...and "="
                )?
          (?=\s)
        captures:
          "1": { name: keyword.control.override.makefile }
          "2": { name: keyword.control.define.makefile }
          "3": { name: variable.other.makefile }
          "4": { name: punctuation.separator.key-value.makefile }
        end: ^\s*(endef)\b
        name: meta.scope.conditional.makefile
        patterns:
          - comment: |
              detect comments in define head
            begin: \G(?!\n)
            end:   ^
            patterns:
              - include: "#comment"
          - include: "#variables"
          - include: "#directives"

      export:
        begin: ^[ ]*(export)\b
        beginCaptures:
          "1": { name: keyword.control.$1.makefile }
        end:   ^
        patterns:
          - include: "#comment"
          - include: "#variable-assignment"
          - match: \S+
            name: variable.other.makefile

      override_private:
        begin: ^[ ]*(override|private)\b
        beginCaptures:
          "1": { name: keyword.control.$1.makefile }
        end:   ^
        patterns:
          - include: "#comment"
          - include: "#variable-assignment"

      unexport_undefine:
        begin: ^[ ]*(unexport|undefine)\b
        beginCaptures:
          "1": { name: keyword.control.$1.makefile }
        end:   ^
        patterns:
          - include: "#comment"
          - match: \S+
            name: variable.other.makefile

      conditional:
        begin: ^\s*(ifeq|ifneq|ifdef|ifndef)(?=\s)
        captures:
          "1": { name: keyword.control.$1.makefile }
        end:   ^\s*(endif)\b
        name: meta.scope.conditional.makefile
        patterns:
          - begin: \G
            end:   ^
            name: meta.scope.condition.makefile
            patterns:
              - include: "#comma"
              - include: "#variables"
              - include: "#comment"
          - begin: ^\s*else(?=\s)\s*(ifeq|ifneq|ifdef|ifndef)*(?=\s)
            beginCaptures:
              "0": { name: keyword.control.else.makefile }
            end:   ^
            patterns:
              - include: "#comma"
              - include: "#variables"
              - include: "#comment"
          - include: $self


# --------------------------- rules --------------------------- #

  __ruleheadBegin:
    match: &__ruleheadBegin |-
      (?x)
      ^(?!\t)    # not a recipe line
      ([^:]*)    # group 1; name of target(s)
      (  ::      # group 2; the separator after the target(s)
      |  :
      | &::
      | &:
      )
      (?!\=)     # ...but not if ':='

  rulehead:
    name: meta.scope.rulehead.makefile
    begin: *__ruleheadBegin
    beginCaptures:
      "1":
        name: meta.scope.targets.makefile
        patterns:
          - captures:
              "1": { name: support.function.target.$1.makefile }
            match: '(?x)
              ^
              \s*
              (?# special targets: )
              ( \.DEFAULT
              | \.DELETE_ON_ERROR
              | \.EXPORT_ALL_VARIABLES
              | \.IGNORE
              | \.INTERMEDIATE
              | \.LOW_RESOLUTION_TIME
              | \.NOTINTERMEDIATE
              | \.NOTPARALLEL
              | \.ONESHELL
              | \.PHONY
              | \.POSIX
              | \.PRECIOUS
              | \.SECONDARY
              | \.SECONDEXPANSION
              | \.SILENT
              | \.SUFFIXES
              | \.WAIT
              )
              \s*
              $'
          - begin: (?=\S)
            end:   (?=\s|$)
            name: entity.name.function.target.makefile
            patterns:
              - include: "#variables"
              - match: '%'
                name: constant.other.placeholder.makefile
      "2": { name: punctuation.separator.key-value.rulehead.makefile }
    end:   '[^\\]$'
    patterns:
      - begin: \G(?!\n|;)
        end:   (?=[^\\])$
        contentName: meta.scope.prerequisites.makefile
        patterns:
          - match: '[ ]+'
          - match: \\\n
            name: constant.character.escape.continuation.makefile
          - match: '%|\*'
            name: constant.other.placeholder.makefile
          - include: "#comment"
          - include: "#variables"

  recipe:
    comment: TODO placeholder

  recipe-line:
    name: meta.scope.recipe.line.makefile
    begin: ^[\t]([+\-@]*)
    beginCaptures:
      "1": { name: keyword.control.$1.makefile
                   keyword.control.recipe-lineprefix.makefile }
    end:   '[^\\]$'
    patterns:
      - match: \\\n
        name: constant.character.escape.continuation.makefile
      - include: "#variables"


# ----------------------- var assignment ---------------------- #

  __varAssignBegin:
    match: &__varAssignBegin |-
      (?x)
      (?:  ^[\ ]*|\G\s*  )  # discard leading whitespace
      (    [^\s:#=]+     )  # group 1; the variable name
      \s*                   # any space between name and assignment operator
                            # assignment operators:
      ( (?<![?:+!])   =     #    =
      |              !=     #   !=
      |             \+=     #   +=
      |             \?=     #   ?=
      |              :=     #   :=
      |             ::=     #  ::=
      |            :::=     # :::=
      )

  variable-assignment:
    begin: *__varAssignBegin
    beginCaptures:
      "1":
        name: variable.other.makefile
        patterns:
          - include: "#variables"
      "2":
        name: punctuation.separator.key-value.makefile
              keyword.operator.assignment.makefile
    end: \n
    patterns:
      - match: \\\n
        name: constant.character.escape.continuation.makefile
      - include: "#comment"
      - include: "#variables"


# ------------------------- expansions ------------------------ #

  # rule naming conventions
    # TODO
    # // not yet introduced; the following is planned:
    # examples:
    #   _$p..p_           <=>  captures $(..)
    #   $p_var-builtin_p  <=>  captures <builtin-var> in $(<builtin-var>)

  variables:
    comment: entry point for all searches for variable expansions
    patterns:
      - include: "#simple-variable"
      - include: "#variable-parentheses"
      - include: "#variable-braces"
  simple-variable:
    match: (\$)([^(){}#\n])
    captures:
      "1":
        name: variable.language.makefile
      "2":
        name: variable.language.makefile
  variable-parentheses:
    patterns:
      - begin: (?x) \$\(
        captures:
          "0": { name: punctuation.definition.variable.makefile }
        end:   (?x)   \) | (?<!\\)\n
        name: string.interpolated.makefile
        patterns:
          - include: "#variables"
          - include: "#builtin-variable-parentheses"
          - include: "#function-variable-parentheses"
          - include: "#flavor-variable-parentheses"
          - include: "#another-variable-parentheses"
  variable-braces:
    patterns:
      - begin: (?x) \$\{
        captures:
          "0": { name: punctuation.definition.variable.makefile }
        end:   (?x)   \} | (?<!\\)\n
        name: string.interpolated.makefile
        patterns:
          - include: "#variables"
          - include: "#builtin-variable-braces"
          - include: "#function-variable-braces"
          - include: "#flavor-variable-braces"
          - include: "#another-variable-braces"
  builtin-variable-parentheses:
    patterns:
      - comment: special variables -> parens -> mutable
        match: (?<=\()(MAKEFILES|VPATH|SHELL|MAKESHELL|MAKE|MAKEFLAGS|MAKECMDGOALS|SUFFIXES|MAKE_TERMOUT|MAKE_TERMERR|\.LIBPATTERNS|\.DEFAULT_GOAL|\.RECIPEPREFIX\.EXTRA_PREREQS)(?=\s*\))
        name: variable.language.readwrite.makefile
      - comment: special variables -> parens -> immutable
        match: (?<=\()(MAKEFILE_LIST|MAKELEVEL|CURDIR|MAKE_RESTARTS|\.VARIABLES|\.FEATURES|\.INCLUDE_DIRS)(?=\s*\))
        name: variable.language.constant.makefile
  builtin-variable-braces:
    comment: TODO distinguish mutable and immutable
    patterns:
      - comment: special variables -> braces -> mutable+immutable
        match: (?<={)(MAKEFILES|VPATH|SHELL|MAKESHELL|MAKE|MAKELEVEL|MAKEFLAGS|MAKECMDGOALS|CURDIR|SUFFIXES|\.LIBPATTERNS)(?=\s*})
        name: variable.language.makefile
  function-variable-parentheses:
    patterns:
      - begin: (?<=\()(subst|patsubst|strip|findstring|filter(-out)?|sort|word(list)?|firstword|lastword|dir|notdir|suffix|basename|addsuffix|addprefix|join|wildcard|realpath|abspath|info|error|warning|shell|foreach|if|or|and|call|eval|value|file|guile|let|intcmp)\s
        beginCaptures:
          "1": { name: support.function.$1.makefile }
        end: (?=\)|((?<!\\)\n))
        name: meta.scope.function-call.makefile
        patterns:
          - include: "#comma"
          - include: "#variables"
          - include: "#interpolation"
          - match: '%|\*'
            name: constant.other.placeholder.makefile
          - match: \\\n
            name: constant.character.escape.continuation.makefile
  function-variable-braces:
    patterns:
      - begin: (?<={)(subst|patsubst|strip|findstring|filter(-out)?|sort|word(list)?|firstword|lastword|dir|notdir|suffix|basename|addsuffix|addprefix|join|wildcard|realpath|abspath|info|error|warning|shell|foreach|if|or|and|call|eval|value|file|guile|let|intcmp)\s
        beginCaptures:
          "1": { name: support.function.$1.makefile }
        end: (?=}|(?<!\\)\n)
        name: meta.scope.function-call.makefile
        patterns:
          - include: "#comma"
          - include: "#variables"
          - include: "#interpolation"
          - match: '%|\*'
            name: constant.other.placeholder.makefile
          - match: \\\n
            name: constant.character.escape.continuation.makefile

  interpolation:
    patterns:
      - include: "#parentheses-interpolation"
      - include: "#braces-interpolation"
    comment: |-
      the "*interpolation*" rules:
      * intended to track nested (..)s and {..}s in function arguments
      * example:
          `$(info a(b)c)` -> GNU make prints "a(b)c"
          i.e. ")" after "b" does _not_ end the argument to `info`
      * will later be renamed to "*NESTED*"

  parentheses-interpolation:
    begin: (?x) \(
    end:   (?x) \)
    patterns:
      - include: "#variables"
      - include: "#interpolation"

  braces-interpolation:
    begin: (?x) \{
    end:   (?x) \}
    patterns:
      - include: "#variables"
      - include: "#interpolation"

  flavor-variable-parentheses:
    patterns:
      - begin: (?<=\()(origin|flavor)\s(?=[^\s)]+\s*\))
        contentName: variable.other.makefile
        beginCaptures:
          "1": { name: support.function.$1.makefile }
        end:   (?=\))
        name: meta.scope.function-call.makefile
        patterns:
          - include: "#variables"
  flavor-variable-braces:
    patterns:
      - begin: (?<={)(origin|flavor)\s(?=[^\s}]+\s*})
        contentName: variable.other.makefile
        beginCaptures:
          "1": { name: support.function.$1.makefile }
        end:   (?=})
        name: meta.scope.function-call.makefile
        patterns:
          - include: "#variables"
  another-variable-parentheses:
    patterns:
      - begin: (?x) (?<=\()   (?! \))
        end:   (?x) (?= \)|(?<!\\)\n )
        name: variable.other.makefile
        patterns:
          - include: "#variables"
          - match: \\\n
            name: constant.character.escape.continuation.makefile
  another-variable-braces:
    patterns:
      - begin: (?x) (?<=\{)   (?! \})
        end:   (?x) (?= \}|(?<!\\)\n )
        name: variable.other.makefile
        patterns:
          - include: "#variables"
          - match: \\\n
            name: constant.character.escape.continuation.makefile
...
